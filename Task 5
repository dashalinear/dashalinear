import java.util.*;

class ShoppingCart implements Basket {
    private Map<String, Integer> products;

    public ShoppingCart() {
        this.products = new HashMap<>();
    }

    @Override
    public void addProduct(String product, int quantity) {
        if (quantity <= 0) {
            throw new IllegalArgumentException("Quantity must be greater than zero.");
        }
        products.put(product, products.getOrDefault(product, 0) + quantity);
    }

    @Override public void removeProduct(String product) {
        products.remove(product);
    }

    @Override public void updateProductQuantity(String product, int quantity) {
        if (quantity < 0) {
            throw new IllegalArgumentException("Quantity cannot be negative.");
        }
        if (quantity == 0) {
            removeProduct(product);
        } else {
            products.put(product, quantity);
        }
    }

    @Override public void clear() {
        products.clear();
    }

    @Override public List<String> getProducts() {
        return new ArrayList<>(products.keySet());
    }

    @Override public int getProductQuantity(String product) {
        return products.getOrDefault(product, 0);
    }
}

interface Basket {
    void addProduct(String product, int quantity);
    void removeProduct(String product);
    void updateProductQuantity(String product, int quantity);
    void clear();
    List<String> getProducts();
    int getProductQuantity(String product);
}
